---
layout: post
title: Ruby doesn’t have class methods
excerpt: What does "def self.foo" realy do...
---
Maybe it is not very innovative and every ruby developer already knows about it, but when I first heard it, it was quite a hit. I mean I always feel that there is something wired on when I wrote some thing like @“def self.foo”@ in my class, but I didn’t fully understand actually does this line do.

Alright. How can ruby doesn’t have class methods that I use them all time, you could ask. You mean something like this?

{% highlight ruby %}
class Foo
  def self.bar
    puts "bar"
  end
 
  def self.baz
    puts "baz"
  end
end
{% endhighlight %}

@bar@ and @baz@ are @Foo@ ‘s class methods, aren’t they? Actually they are not! So what they are? To answer that you should know two things. You should know what does this piece of code do:

{% highlight ruby %}
animal = "cat"
def animal.speak
  "miau"
end
 
puts animal.speak
# miau
{% endhighlight %}

It adds a @speak@ method to the @animal@ object. It doesn’t add it to the @animal@ class (which is a @String@), it also doesn’t add it to the other “cat” string. Only to the animal. How ruby does it? It creates a something called singleton class, and put there a speak method. When animal object receives any method call, it looks first in self, then in it’s singleton class (if exist) and then in each parent. When it reaches top, @method_missing@ is called and exactly same like any other methods calls.

{% highlight ruby %}
animal = "cat"
 
def animal.method_missing(args)
  p "#{self} does not #{args}"
end
 
animal.fly
# "cat does not fly"
{% endhighlight %}

The second thing you should know is what does self is in class @Foo@ body.

{% highlight ruby %}
class Foo
  p self
end
# Foo
{% endhighlight %}

Alright, so class Foo can looks like this:

{% highlight ruby %}
class Foo
end
 
def Foo.bar
  puts "bar"
end
 
def Foo.baz
  puts "baz"
end
{% endhighlight %}

What happend here? Same as adding method @speak@ for @animal@ object. Here we added method baz to @Foo@ object. Yes, @Foo@ is an object, and it is an instance of a class @Class@. Method @baz@ has been added to his singleton class. Not to all classes, just to the @Foo@. So, when you adds so called class methods, you actually adds an instance method to object’s parent class object through his singleton class.